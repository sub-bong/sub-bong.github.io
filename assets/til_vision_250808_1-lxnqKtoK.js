const n=`---
title: "컴퓨터 비전 모델과 고급 딥러닝 기법"
date: "2025-08-08"
keywords: ["TIL", "딥러닝"]
---

# 컴퓨터 비전 모델과 고급 딥러닝 기법

## 컴퓨터 비전을 위한 CNN (Convolutional Neural Network)

- **개념**: 이미지의 공간적 특징(spatial feature)을 효과적으로 추출하기 위해 고안된 딥러닝 모델입니다. 인간의 시신경을 모방한 구조로, 이미지 인식, 객체 탐지 등 대부분의 컴퓨터 비전 분야에서 핵심적인 역할을 합니다.
- **주요 구성 요소**:
  - **합성곱 층 (Convolutional Layer)**: 필터(Filter, 또는 커널)를 이미지 전체에 순차적으로 적용하며 특징 맵(Feature Map)을 생성합니다. 이미지의 지역적인 특징(모서리, 질감 등)을 추출하는 역할을 합니다.
  - **풀링 층 (Pooling Layer)**: 특징 맵의 크기를 줄여(Down-sampling) 계산량을 감소시키고, 주요 특징만 남겨 과적합을 방지하는 역할을 합니다. (예: Max Pooling, Average Pooling)
- **원리**: 저수준 특징(선, 색상)에서 고수준 특징(형태, 객체)으로 점차 복잡한 피처를 계층적으로 학습합니다.

## 대표적인 비전 모델

- **R-CNN 계열**: **정확도**를 중시하는 객체 탐지(Object Detection) 모델입니다. 이미지를 여러 영역(Region)으로 나눈 뒤, 각 영역에 대해 분류를 수행하는 2-stage 방식으로 동작하여 속도는 상대적으로 느리지만 높은 정확도를 보입니다. (주로 의료 영상 분석 등 정확성이 중요한 분야에 사용)
- **YOLO (You Only Look Once) 계열**: **실시간성(속도)**을 중시하는 객체 탐지 모델입니다. 이미지를 한 번만 보고 객체의 위치와 종류를 동시에 예측하는 1-stage 방식으로 동작하여 매우 빠른 속도를 자랑합니다. (주로 자율주행, 실시간 영상 분석 등에 사용)

## 딥러닝 학습을 위한 고급 기법

### 1. 활성 함수 (Activation Functions)

- **ReLU (Rectified Linear Unit)**: 가장 널리 사용되는 활성 함수 중 하나로, 계산이 간단하고 학습 속도가 빠릅니다. 하지만 입력값이 음수이면 항상 0을 출력하여 뉴런이 비활성화되는 **'죽은 렐루(Dying ReLU)'** 현상이 발생할 수 있습니다.
- **Leaky ReLU, ELU 등**: '죽은 렐루' 현상을 해결하기 위해 변형된 ReLU 계열 함수들입니다.
- **Swish**: 구글의 AutoML을 통해 발견된 함수로, 복잡한 데이터셋에서 ReLU보다 좋은 성능을 보이는 경우가 많습니다.

### 2. 옵티마이저 (Optimizers)

- **적응적 학습률 (Adaptive Learning Rate)**: 학습 과정에서 각 매개변수(가중치)마다 학습률을 다르게 조정하는 방식입니다. (예: Adagrad, RMSprop, **Adam**)
- **모멘텀 (Momentum)**: 경사 하강법에 관성(Momentum)을 추가하여, 이전에 이동했던 방향을 기억하고 그 방향으로 일정 힘을 더해 이동하게 합니다. 이를 통해 지역 최소점(Local Minimum)을 탈출하고 전역 최소점(Global Minimum)을 찾는 데 도움을 줍니다.

### 3. 모델 튜닝 및 규제 (Tuning & Regularization)

- **콜백 (Callbacks)**: 모델의 학습 과정 중간에 특정 이벤트를 수행하도록 하는 기능입니다. 예를 들어, 특정 지점마다 모델의 가중치를 저장(**체크포인트**)하거나, 검증 손실이 더 이상 개선되지 않으면 학습을 조기 종료(**조기 종료, Early Stopping**)하는 데 사용됩니다.
- **모델 경량화 (Model Pruning/Quantization)**: 최근 트렌드로, 모델의 크기를 줄여 **온디바이스 AI(On-device AI)**와 같이 제한된 자원을 가진 환경에서도 딥러닝 모델을 구동할 수 있도록 하는 기술입니다.
- **인코더-디코더 (Encoder-Decoder)**: 입력 데이터를 압축된 형태의 벡터(잠재 벡터, Latent Vector)로 변환하는 **인코더**와, 이 벡터를 다시 원본과 같은 형태로 복원하는 **디코더** 구조입니다. 오토인코더(Autoencoder)가 대표적인 예시입니다.
`;export{n as default};
